% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/with_progress_parallel.R
\name{with_progress_parallel}
\alias{with_progress_parallel}
\title{Run a Function in Parallel with Progress Bar and Optional Beep}
\usage{
with_progress_parallel(
  FUN,
  ...,
  steps = NULL,
  future_mode = c("lapply", "mapply"),
  show_beep = TRUE,
  workers = parallelly::availableCores() - 1,
  progress_format = "[:bar] :percent :eta :message",
  .seed = NULL
)
}
\arguments{
\item{FUN}{The function to apply. Should take as its first argument the elements of the input (as in \code{lapply}) or the arguments to be mapped over (as in \code{mapply}).}

\item{...}{Arguments to be passed as inputs to \code{FUN}, typically one or more lists or vectors to iterate over.}

\item{steps}{Number of steps for the progress bar. If \code{NULL} (default), will be automatically set to the length of the first input.}

\item{future_mode}{\code{"lapply"} (default) for a single mapped input, or \code{"mapply"} for mapping over multiple inputs simultaneously.}

\item{show_beep}{Logical, whether to play a sound upon completion. Default is \code{TRUE}. Requires the \code{beepr} package.}

\item{workers}{Number of parallel workers. Default is \code{parallelly::availableCores() - 1}.}

\item{progress_format}{A string template for the progress bar, passed to \code{progressr::handler_progress}.}

\item{.seed}{Seed for parallel random number generation. Default is \code{NULL}.}
}
\value{
A list of the results from \code{FUN} applied in parallel to the input(s).
}
\description{
This function provides a convenient wrapper for parallelized application of any function
using \code{future_lapply} (for single input) or \code{future_mapply} (for multiple inputs),
while displaying a progress bar. It supports flexible core allocation and optionally plays a sound when complete.
}
\examples{
# lapply example: squaring numbers in parallel
x <- 1:10
squares <- with_progress_parallel(FUN = function(x) x^2, x)

# mapply example: adding two vectors in parallel
a <- 1:5
b <- 6:10
sums <- with_progress_parallel(FUN = function(x, y) x + y, a, b, future_mode = "mapply")

}
